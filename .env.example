# Environment Configuration
NODE_ENV=development

# Server Configuration
PORT=3000
HOST=localhost

# Database Configuration
DATABASE_URL=postgresql://conductor:conductor_password@localhost:5432/conductor
DB_HOST=localhost
DB_PORT=5432
DB_NAME=conductor
DB_USER=conductor
DB_PASSWORD=conductor_password

# Redis Configuration
REDIS_URL=redis://localhost:6379
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# Application Configuration
# IMPORTANT: Generate secure random strings for production!
# Use: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=your-jwt-secret-key-here-minimum-32-characters-recommended
SESSION_SECRET=your-session-secret-here

# JWT Configuration
# Access token expiry (short-lived for security)
JWT_ACCESS_EXPIRY=15m
# Refresh token expiry (long-lived for convenience)
JWT_REFRESH_EXPIRY=7d

# Password Hashing Configuration
# Higher rounds = more secure but slower (10-12 recommended)
BCRYPT_ROUNDS=10

# Logging Configuration
LOG_LEVEL=info
LOG_FORMAT=combined

# Security Configuration
CORS_ORIGIN=http://localhost:3000
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Feature Flags
ENABLE_METRICS=true
ENABLE_SWAGGER=true
ENABLE_HEALTH_CHECKS=true

# External Services (if needed)
WEBHOOK_SECRET=your-webhook-secret-here
API_KEY=your-api-key-here

# Development/Testing
TEST_DATABASE_URL=postgresql://conductor:conductor_password@localhost:5432/conductor_test
MOCK_EXTERNAL_SERVICES=false

# Database Mode Configuration
# Set to 'false' to use PostgreSQL (RECOMMENDED for production)
# Set to 'true' to use mock in-memory database (for quick testing only)
#
# IMPORTANT: PostgreSQL is now the default and recommended mode.
# Mock mode should only be used for rapid prototyping or environments without database access.
#
# PostgreSQL Setup:
# 1. Start database: docker-compose up -d postgres redis
# 2. Wait for health check: docker-compose ps (should show 'healthy')
# 3. Run migrations: npm run migrate (if migration script exists)
# 4. Populate demo data: ./populate-demo-data.sh (optional)
# 5. Start app: npm start
#
# Connection String Format:
# postgresql://[user]:[password]@[host]:[port]/[database]
# Example: postgresql://conductor:conductor_password@localhost:5432/conductor
USE_MOCK_DB=false

# ============================================================================
# Jira Integration (OAuth 2.0)
# ============================================================================

# Jira OAuth 2.0 Credentials
# Obtain these from: https://developer.atlassian.com/console/myapps/
# 1. Create a new app
# 2. Configure OAuth 2.0 (3LO)
# 3. Add redirect URL: http://localhost:3000/api/v1/integrations/jira/callback
# 4. Enable required scopes: read:jira-work, write:jira-work, read:jira-user, offline_access
JIRA_CLIENT_ID=your-jira-oauth-client-id-here
JIRA_CLIENT_SECRET=your-jira-oauth-client-secret-here

# Jira OAuth Redirect URI
# Must match the redirect URL configured in your Atlassian app
# For local development: http://localhost:3000/api/v1/integrations/jira/callback
# For production: https://yourdomain.com/api/v1/integrations/jira/callback
JIRA_REDIRECT_URI=http://localhost:3000/api/v1/integrations/jira/callback

# Jira Webhook Configuration
# Secret for webhook signature verification (HMAC-SHA256)
# Generate secure random string: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JIRA_WEBHOOK_SECRET=your-webhook-secret-here-minimum-32-characters

# Jira Webhook Base URL
# Public URL where Jira can send webhook events
# For local development with ngrok: https://your-subdomain.ngrok.io
# For production: https://yourdomain.com
JIRA_WEBHOOK_BASE_URL=http://localhost:3000

# Jira Integration Settings
# Auto-register webhooks when connection is established
JIRA_AUTO_REGISTER_WEBHOOKS=true

# Rate limiting for Jira API requests (requests per minute)
# Jira Cloud limit: 100 requests per minute per user
JIRA_RATE_LIMIT_PER_MINUTE=100

# Token encryption key (uses JWT_SECRET by default if not specified)
# Generate secure random string: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JIRA_ENCRYPTION_KEY=your-encryption-key-here-minimum-32-characters