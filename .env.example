# Environment Configuration
NODE_ENV=development

# Server Configuration
PORT=3000
HOST=localhost

# Database Configuration
DATABASE_URL=postgresql://conductor:conductor_password@localhost:5432/conductor
DB_HOST=localhost
DB_PORT=5432
DB_NAME=conductor
DB_USER=conductor
DB_PASSWORD=conductor_password

# Redis Configuration
REDIS_URL=redis://localhost:6379
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# Application Configuration
JWT_SECRET=your-jwt-secret-key-here
SESSION_SECRET=your-session-secret-here

# Logging Configuration
LOG_LEVEL=info
LOG_FORMAT=combined

# Security Configuration
CORS_ORIGIN=http://localhost:3000
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Feature Flags
ENABLE_METRICS=true
ENABLE_SWAGGER=true
ENABLE_HEALTH_CHECKS=true

# External Services (if needed)
WEBHOOK_SECRET=your-webhook-secret-here
API_KEY=your-api-key-here

# Development/Testing
TEST_DATABASE_URL=postgresql://conductor:conductor_password@localhost:5432/conductor_test
MOCK_EXTERNAL_SERVICES=false

# Database Mode Configuration
# Set to 'false' to use PostgreSQL (RECOMMENDED for production)
# Set to 'true' to use mock in-memory database (for quick testing only)
#
# IMPORTANT: PostgreSQL is now the default and recommended mode.
# Mock mode should only be used for rapid prototyping or environments without database access.
#
# PostgreSQL Setup:
# 1. Start database: docker-compose up -d postgres redis
# 2. Wait for health check: docker-compose ps (should show 'healthy')
# 3. Run migrations: npm run migrate (if migration script exists)
# 4. Populate demo data: ./populate-demo-data.sh (optional)
# 5. Start app: npm start
#
# Connection String Format:
# postgresql://[user]:[password]@[host]:[port]/[database]
# Example: postgresql://conductor:conductor_password@localhost:5432/conductor
USE_MOCK_DB=false